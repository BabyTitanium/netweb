<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ps.net.dao.ZoneAlarmValueMapper">
  <resultMap id="BaseResultMap" type="com.ps.net.model.ZoneAlarmValue">
    <id column="zone_id" jdbcType="INTEGER" property="zone_id" />
    <id column="alarm_code" jdbcType="CHAR" property="alarm_code" />
    <result column="alarm_value" jdbcType="DOUBLE" property="alarm_value" />
    <result column="available" jdbcType="INTEGER" property="available" />
  </resultMap>
  <sql id="Base_Column_List">
    zone_id, alarm_code, alarm_value, available
  </sql>
  <select id="selectByPrimaryKey" parameterType="com.ps.net.model.ZoneAlarmValueKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from zone_alarm_value
    where zone_id = #{zone_id,jdbcType=INTEGER}
      and alarm_code = #{alarm_code,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.ps.net.model.ZoneAlarmValueKey">
    delete from zone_alarm_value
    where zone_id = #{zone_id,jdbcType=INTEGER}
      and alarm_code = #{alarm_code,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="com.ps.net.model.ZoneAlarmValue">
    insert into zone_alarm_value (zone_id, alarm_code, alarm_value, 
      available)
    values (#{zone_id,jdbcType=INTEGER}, #{alarm_code,jdbcType=CHAR}, #{alarm_value,jdbcType=DOUBLE}, 
      #{available,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.ps.net.model.ZoneAlarmValue">
    insert into zone_alarm_value
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="zone_id != null">
        zone_id,
      </if>
      <if test="alarm_code != null">
        alarm_code,
      </if>
      <if test="alarm_value != null">
        alarm_value,
      </if>
      <if test="available != null">
        available,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="zone_id != null">
        #{zone_id,jdbcType=INTEGER},
      </if>
      <if test="alarm_code != null">
        #{alarm_code,jdbcType=CHAR},
      </if>
      <if test="alarm_value != null">
        #{alarm_value,jdbcType=DOUBLE},
      </if>
      <if test="available != null">
        #{available,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="java.util.Map">
    update zone_alarm_value
    <set>
      <if test="alarm_value != null">
        alarm_value = #{alarm_value,jdbcType=DOUBLE},
      </if>
      <if test="available != null">
        available = #{available,jdbcType=INTEGER},
      </if>
    </set>
    where zone_id = #{zone_id,jdbcType=INTEGER}
      and alarm_code = #{alarm_code,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ps.net.model.ZoneAlarmValue">
    update zone_alarm_value
    set alarm_value = #{alarm_value,jdbcType=DOUBLE},
      available = #{available,jdbcType=INTEGER}
    where zone_id = #{zone_id,jdbcType=INTEGER}
      and alarm_code = #{alarm_code,jdbcType=CHAR}
  </update>
  <select id="getAlarmList" parameterType="java.util.Map" resultType="java.util.Map">
    select zav.*,alt.alarm_name as alarm_name,alt.alarm_note as alarm_note from zone_alarm_value zav ,alarms_type alt where
    1=1
    <if test="zone_id!=null">
      and zav.zone_id=#{zone_id}
    </if>
    and zav.alarm_code=alt.alarm_code

    order by zav.zone_id
    <if test="first!=null and last!=null">
      limit #{first},#{last}
    </if>

  </select>
  <select id="getAlarmListCount" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(*) from (select zav.*,alt.alarm_name as alarm_name,alt.alarm_note as alarm_note from zone_alarm_value zav
    ,alarms_type alt where
    1=1
    <if test="zone_id!=null">
      and zav.zone_id=#{zone_id}
    </if>
    and zav.alarm_code=alt.alarm_code
    )as g

  </select>
  <insert id="addAlarmValue" parameterType="java.util.Map">
    insert into zone_alarm_value
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="zone_id != null">
        zone_id,
      </if>
      <if test="alarm_code != null">
        alarm_code,
      </if>
      <if test="alarm_value != null">
        alarm_value,
      </if>
      <if test="available != null">
        available,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="zone_id != null">
        #{zone_id,jdbcType=INTEGER},
      </if>
      <if test="alarm_code != null">
        #{alarm_code,jdbcType=CHAR},
      </if>
      <if test="alarm_value != null">
        #{alarm_value,jdbcType=DOUBLE},
      </if>
      <if test="available != null">
        #{available,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
</mapper>