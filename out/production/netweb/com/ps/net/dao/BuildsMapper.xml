<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ps.net.dao.BuildsMapper">
  <resultMap id="BaseResultMap" type="com.ps.net.model.Builds">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="build_name" jdbcType="VARCHAR" property="build_name" />
    <result column="build_num" jdbcType="INTEGER" property="build_num" />
    <result column="zone_id" jdbcType="INTEGER" property="zone_id" />
    <result column="cal_mode" jdbcType="INTEGER" property="cal_mode" />
  </resultMap>
  <sql id="Base_Column_List">
    id, build_name, build_num, zone_id, cal_mode
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from builds
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from builds
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ps.net.model.Builds">
    insert into builds (id, build_name, build_num, 
      zone_id, cal_mode)
    values (#{id,jdbcType=INTEGER}, #{build_name,jdbcType=VARCHAR}, #{build_num,jdbcType=INTEGER}, 
      #{zone_id,jdbcType=INTEGER}, #{cal_mode,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.ps.net.model.Builds">
    insert into builds
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="build_name != null">
        build_name,
      </if>
      <if test="build_num != null">
        build_num,
      </if>
      <if test="zone_id != null">
        zone_id,
      </if>
      <if test="cal_mode != null">
        cal_mode,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="build_name != null">
        #{build_name,jdbcType=VARCHAR},
      </if>
      <if test="build_num != null">
        #{build_num,jdbcType=INTEGER},
      </if>
      <if test="zone_id != null">
        #{zone_id,jdbcType=INTEGER},
      </if>
      <if test="cal_mode != null">
        #{cal_mode,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ps.net.model.Builds">
    update builds
    <set>
      <if test="build_name != null">
        build_name = #{build_name,jdbcType=VARCHAR},
      </if>
      <if test="build_num != null">
        build_num = #{build_num,jdbcType=INTEGER},
      </if>
      <if test="zone_id != null">
        zone_id = #{zone_id,jdbcType=INTEGER},
      </if>
      <if test="cal_mode != null">
        cal_mode = #{cal_mode,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ps.net.model.Builds">
    update builds
    set build_name = #{build_name,jdbcType=VARCHAR},
      build_num = #{build_num,jdbcType=INTEGER},
      zone_id = #{zone_id,jdbcType=INTEGER},
      cal_mode = #{cal_mode,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getByZoneId" parameterType="java.lang.Integer" resultType="java.util.Map">
    select * from builds where
 zone_id = #{zone_id,jdbcType=INTEGER} order by id
  </select>
  <insert id="addBuilding" useGeneratedKeys="true" keyProperty="id">
    insert into builds
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="build_name != null">
        build_name,
      </if>
      <if test="build_num != null">
        build_num,
      </if>
      <if test="zone_id != null">
        zone_id,
      </if>
      <if test="cal_mode != null">
        cal_mode,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="build_name != null">
        #{build_name,jdbcType=VARCHAR},
      </if>
      <if test="build_num != null">
        #{build_num,jdbcType=INTEGER},
      </if>
      <if test="zone_id != null">
        #{zone_id,jdbcType=INTEGER},
      </if>
      <if test="cal_mode != null">
        #{cal_mode,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="checkBuilding" parameterType="java.util.Map" resultType="java.util.Map">
    select * from builds
    where 1=1
    <if test="zone_id!=null">
      and zone_id=#{zone_id}
    </if>
    <if test="build_num!=null">
      and build_num=#{build_num}
    </if>
  </select>
  <select id="getBuildingList" parameterType="java.util.Map" resultType="java.util.Map">
    select * from builds
    where 1=1

    <if test="zone_id!=null">
      and zone_id=#{zone_id}
    </if>
    order by id
    <if test="first!=null and last!=null">
      limit #{first},#{last}
    </if>
    ;
  </select>
  <select id="getBuildingListCount" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(*) from(select * from builds
    where 1=1
    <if test="zone_id!=null">
      and zone_id=#{zone_id}
    </if>) as g
  </select>
  <update id="updateBuilding" parameterType="java.util.Map">
    update builds
    <set>
      <if test="build_name != null">
        build_name = #{build_name,jdbcType=VARCHAR},
      </if>
      <if test="build_num != null">
        build_num = #{build_num,jdbcType=INTEGER},
      </if>
      <if test="zone_id != null">
        zone_id = #{zone_id,jdbcType=INTEGER},
      </if>
      <if test="cal_mode != null">
        cal_mode = #{cal_mode,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}

  </update>
</mapper>