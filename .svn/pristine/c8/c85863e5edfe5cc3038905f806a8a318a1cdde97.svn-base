package com.ps.net.controller;

import com.ps.net.dao.CustomTypeMapper;
import com.ps.net.model.CustomType;
import com.ps.net.model.Rooms;
import com.ps.net.model.SuccessList;
import com.ps.net.service.CustomTypeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class CustomTypeController {
    @Autowired
    private CustomTypeService customTypeService;
    @RequestMapping("customType.do")
    public String customType(){
        return "customType";
    }
    @RequestMapping(value = "customTypeList.do",method = RequestMethod.GET)
    public @ResponseBody
    Map<String,Object> getCustomTypeList(Integer page,Integer limit,String type_name,String type_code){
        try {
            Map<String, Object> map = new HashMap<>();
            if(type_name==""){
                type_name=null;
            }
            if(type_code==""){
                type_code=null;

            }
            List<CustomType> list = customTypeService.getCustomTypeList(page,limit,type_name,type_code);
            Integer count=customTypeService.getCustomTypeListCount(type_name,type_code);
            map.put("code", 0);
            map.put("msg", "");
            map.put("data", list);
            map.put("count",count);
            return map;
        }catch (Exception e){
            return null;
        }
    }
    @RequestMapping(value = "editCusType.do",method = RequestMethod.POST)
   public @ResponseBody   Map<String,String> editCusTypeAvailable(CustomType customType){
        Map<String,String> map=new HashMap<>();
        try{
            customTypeService.updateCustomType(customType);
            map.put("state","success");
            return map;
        }catch (Exception e){
            return null;
        }
    }
    @RequestMapping(value = "CustomTypeNameCheck.do",method = RequestMethod.GET)
   public   @ResponseBody Map<String,String> CustomTypeNameCheck(Integer id,String type_name) {
        Map<String, String> map = new HashMap<>();
        try {
            List<CustomType> list=customTypeService.nameCheck(id,type_name);
            if(list.size()>0){
                map.put("state","error");
            }else
                map.put("state","success");
            return map;
        }catch (Exception e){
            return  null;
        }
    }
    @RequestMapping(value = "CustomTypeCodeCheck.do",method = RequestMethod.GET)
   public @ResponseBody   Map<String,String> CustomTypeCodeCheck(Integer id,String type_code) {
        Map<String, String> map = new HashMap<>();
        try {
            List<CustomType> list=customTypeService.codeCheck(id,type_code);
            if(list.size()>0){
                map.put("state","error");
            }else
                map.put("state","success");
            return map;
        }catch (Exception e){
            return  null;
        }
    }
    @RequestMapping(value = "addCustomType.do",method = RequestMethod.POST)
    public  @ResponseBody Map<String,String> addCustomType(CustomType customType){
        Map<String,String> map=new HashMap<>();
        try {
            customTypeService.addCustomType(customType);
            map.put("state","success");
            return  map;
        }catch (Exception e){
            return null;
        }
    }
    @RequestMapping(value = "getCustomType.do",method = RequestMethod.GET)
   public   @ResponseBody  CustomType getCustomType(Integer id){
        try {
            CustomType customType=customTypeService.getCustomType(id);
            return customType;
        }catch (Exception e){
            return null;
        }
    }
    @RequestMapping(value = "deleteCustomType.do",method = RequestMethod.GET)
    public  @ResponseBody Map<String,String> deleteCustomType(Integer id){
        Map<String,String> map=new HashMap<>();
        try {
           customTypeService.deleteCustomType(id);
            map.put("state","success");
            return map;
        }catch (Exception e){
            return null;
        }
    }
    @RequestMapping(value = "CustomTypeExist",method = RequestMethod.GET)
    public  @ResponseBody Map<String, String> CustomTypeExist(Integer id){
        Map<String,String> map=new HashMap<>();
        List<Rooms> list=customTypeService.CustomTypeExist(id);
        if(list.size()<=0){
            map.put("state","success");
        }
        return map;
    }
}
