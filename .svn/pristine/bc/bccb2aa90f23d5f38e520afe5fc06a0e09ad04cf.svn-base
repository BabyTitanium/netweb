package com.ps.net.controller;

import com.ps.net.changeObject.ExtraMethod;
import com.ps.net.dao.BuildBranchMapper;
import com.ps.net.dao.BuildHeatInfoMapper;
import com.ps.net.dao.UnitsMapper;
import com.ps.net.model.BuildBranch;
import com.ps.net.model.BuildBranchKey;
import com.ps.net.model.BuildHeatInfo;
import com.ps.net.model.Builds;
import com.ps.net.service.ZoneBuildingService;
import com.ps.net.service.ZoneRoomService;
import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.management.ObjectName;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("sysIndex")
public class ZoneBuildingController {
    @Autowired
    private ZoneBuildingService zoneBuildingService;
    @Autowired
    private ZoneRoomService zoneRoomService;
    @Autowired
    private UnitsMapper unitsMapper;
    @Autowired
    private BuildHeatInfoMapper buildHeatInfoMapper;
    @Autowired
    private BuildBranchMapper buildBranchMapper;
    @RequestMapping("addBuilding")
    public @ResponseBody  Map<String,Object>  addBuliding(@RequestParam Map<String,Object> map){
        Map<String,Object> data=new HashMap<>();
        try {
            String build_num=String.valueOf(map.get("build_num"));
            String build_name=build_num+"号楼";
            map.put("build_name",build_name);
           zoneBuildingService.addBuilding(map);
            data.put("build_id",map.get("id"));
            return data;
        }catch (Exception e){
            return null;
        }
    }
    @RequestMapping("checkBuilding")
    public @ResponseBody  Map<String,Object>  checkBuliding(@RequestParam Map<String,Object> map) {
        try {
            Map<String, Object> result = new HashMap<>();
            //根据build_id与unit_num查找
            Map<String, Object> builds = zoneBuildingService.checkBuilding(map);
            if (builds != null) {
                result.put("state", "success");
                result.put("build_id", builds.get("id"));
            } else
                result.put("state", "error");
            return result;
        } catch (Exception e) {
            return null;
        }
    }
    @RequestMapping(value = "buildingList")
    public @ResponseBody Map<String,Object> buildingList(@RequestParam Map<String,Object> map){
        try {
            Map<String,Object> data=new HashMap<>();
            List<Map<String,Object>> list=zoneBuildingService.getBuildingList(map);
            Integer count=zoneBuildingService.getBuildingListCount(map);
            for(int i=0;i<list.size();i++){
                Map<String,Object> build=list.get(i);
               if( build.get("cal_mode")!=null) {
                   Integer cal_mode = Integer.parseInt(String.valueOf(build.get("cal_mode")));
                   if (cal_mode == 0) {
                       build.put("cal_mode", "分户累加");
                   } else if (cal_mode == 1) {
                       build.put("cal_mode", "分支计算");
                   }
               }else {
                   build.put("cal_mode", "-");
               }
                Integer build_id=Integer.parseInt(String.valueOf(build.get("id")));
                Map<String,Object> buildHeatInfo=buildHeatInfoMapper.selectByPrimaryKey(build_id);
                if(buildHeatInfo!=null){
                    for (String s:buildHeatInfo.keySet()){
                       if(buildHeatInfo.get(s)!=null)
                        build.put(s,buildHeatInfo.get(s));
                       else
                           build.put(s,"-");
                    }
                }else{
                    build.put("total_count","-");
                    build.put("total_room_area","-");
                    build.put("total_heat_area","-");
                    build.put("heat_count","-");
                    build.put("total_count","-");
                    build.put("real_heat_area","-");

                }
            }
            return ExtraMethod.returnList(list,count);
        }catch (Exception e){
            return null;
        }
    }
    @RequestMapping(value ="getBuildingInfo")
    public @ResponseBody Builds getBuildingInfo(Integer id){
        try {
            Builds builds =zoneBuildingService.getBuildingInfo(id);
            return builds;
        }catch (Exception e){
            return null;
        }
    }
    @RequestMapping(value ="editBuildingInfo")
    public @ResponseBody Map<String,Object> editBuildingInfo(@RequestParam Map<String,Object> build,Integer id,String branchPlus[],String branchMinus[]){
        try {
            Map<String,Object> map=new HashMap<>();
            build=ExtraMethod.setNull(build);
            zoneBuildingService.editBuilding(build);
            if(branchPlus!=null){
                for(int i=0;i<branchPlus.length;i++){
                    Integer branch_id=Integer.parseInt(branchPlus[i]);
                    BuildBranch buildBranch=new BuildBranch();
                    buildBranch.setPlus_minus(0);
                    buildBranch.setBranch_id(branch_id);
                    buildBranch.setBuild_id(id);
                    BuildBranchKey buildBranchKey=new BuildBranchKey();
                    buildBranchKey.setBranch_id(branch_id);
                    buildBranchKey.setBuild_id(id);
                    BuildBranch buildBranch1=buildBranchMapper.selectByPrimaryKey(buildBranchKey);
                    if(buildBranch1!=null){
                        buildBranchMapper.updateByPrimaryKeySelective(buildBranch);
                    }else{
                        buildBranchMapper.insertSelective(buildBranch);
                    }
                }
            }
            if(branchMinus!=null){
                for(int i=0;i<branchMinus.length;i++){
                    Integer branch_id=Integer.parseInt(branchMinus[i]);
                    BuildBranch buildBranch=new BuildBranch();
                    buildBranch.setPlus_minus(1);
                    buildBranch.setBranch_id(branch_id);
                    buildBranch.setBuild_id(id);
                    BuildBranchKey buildBranchKey=new BuildBranchKey();
                    buildBranchKey.setBranch_id(branch_id);
                    buildBranchKey.setBuild_id(id);
                    BuildBranch buildBranch1=buildBranchMapper.selectByPrimaryKey(buildBranchKey);
                    if(buildBranch1!=null){
                        buildBranchMapper.updateByPrimaryKeySelective(buildBranch);
                    }else{
                        buildBranchMapper.insertSelective(buildBranch);
                    }
                }
            }
            map.put("state","success");
            return map;
        }catch (Exception e){
            return null;
        }
    }
    @RequestMapping(value = "statisticBuilding")
    public @ResponseBody Map<String,Object> statisticBuilding(Integer id){
        try {
            Map<String,Object> buildHeatInfo=buildHeatInfoMapper.selectByPrimaryKey(id);
            if(buildHeatInfo==null){
                zoneBuildingService.addBuildHeatInfo(id);
            }else{
                zoneBuildingService.updateBuildHeatInfo(id);
            }
            Map<String,Object> result=new HashMap<>();
            result.put("state","success");
            return result;
        }catch (Exception e){
            return  null;
        }
    }

    @RequestMapping(value = "statisticAllBuilding")
    public @ResponseBody Map<String,Object> statisticAllBuilding(Integer zone_id){
        try{
            Map<String,Object> result=new HashMap<>();
            Map<String,Object> condition=new HashMap<>();
            condition.put("zone_id",zone_id);
            List<Map<String,Object>> list=zoneBuildingService.getBuildingList(condition);
            for(int i=0;i<list.size();i++){
                Map<String,Object> building=list.get(i);
                Integer id=Integer.parseInt(String.valueOf(building.get("id")));
                Map<String,Object> buildHeatInfo=buildHeatInfoMapper.selectByPrimaryKey(id);
                if(buildHeatInfo==null){
                    zoneBuildingService.addBuildHeatInfo(id);
                }else{
                    zoneBuildingService.updateBuildHeatInfo(id);
                }
            }
            result.put("state","success");
            return result;
        }catch (Exception e){
            return null;
        }
    }
    @RequestMapping(value ="deleteBuildingInfo")
    public @ResponseBody Map<String,Object> deleteBuildingInfo(Integer id){
        try {
            //删除房间
            Map<String,Object> condition=new HashMap<>();
            condition.put("build_id",id);
            List<Map<String,Object>> roomsList=zoneRoomService.getBuildingRoomsList(condition);
            List<Map<String,Object>> unitsList=zoneBuildingService.getUnitsByBuilding(id);
            for(int i=0;i<roomsList.size();i++){
                Map<String,Object> room=roomsList.get(i);
                Integer room_id=Integer.parseInt(String.valueOf(room.get("id")));
                zoneRoomService.deleteRoom(room_id);
            }
            //删除单元
            for(int i=0;i<unitsList.size();i++){
                Map<String,Object> units=unitsList.get(i);
                Integer units_id=Integer.parseInt(String.valueOf(units.get("id")));
                unitsMapper.deleteByPrimaryKey(units_id);
            }
            //删除楼栋
            zoneBuildingService.deleteBuilding(id);
         //   zoneBuildingService.deleteBuildingHeatInfo(id);
            Map<String,Object> map=new HashMap<>();
            map.put("state","success");
            return map;
        }catch (Exception e){
            return null;
        }
    }
    @RequestMapping(value = "getBuildingBranches")
    public @ResponseBody List getBuildingBranches(Integer build_id){
        try{
            List<Map<String,Object>> list=buildBranchMapper.getBuildBranches(build_id);
            return list;
        }catch (Exception e){
            return null;
        }
    }
    @RequestMapping(value = "deleteBuildBranch")
    public @ResponseBody Map deleteBuildBranch(Integer build_id,Integer branch_id){
        try{
            BuildBranch buildBranch=new BuildBranch();
            buildBranch.setBuild_id(build_id);
            buildBranch.setBranch_id(branch_id);
            buildBranchMapper.deleteByPrimaryKey(buildBranch);
            Map<String,String> result=new HashMap<>();
            result.put("state","success");
            return  result;
        }catch (Exception e){
            return null;
        }
    }
    @RequestMapping("buildingInfoPage")
    public String index(Integer id, ModelMap map){
        map.addAttribute("id",id);
        return "zoneBuilding";
    }
}
