package com.ps.net.service.impl;

import com.ps.net.dao.BuildsMapper;
import com.ps.net.dao.RoomsMapper;
import com.ps.net.dao.UnitsMapper;
import com.ps.net.model.Builds;
import com.ps.net.service.ZoneRoomService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class ZoneRoomServiceImpl implements ZoneRoomService {
    @Resource
    private RoomsMapper roomsMapper;
    @Resource
    private BuildsMapper buildsMapper;
    @Resource
    private UnitsMapper unitsMapper;
    @Override
    public      List<Map<String,Object>> getBuildingsByZoneId(Integer zone_id){
        return buildsMapper.getByZoneId(zone_id);
    }
    @Override
   public List<Map<String,Object>> getBuildingRoomsList(Map<String,Object> map){
        if(map.get("page")!=null&&map.get("limit")!=null) {
            Integer page = Integer.parseInt(String.valueOf(map.get("page")));
            Integer limit = Integer.parseInt(String.valueOf(map.get("limit")));
            Integer first;
            Integer last;
            first = (page - 1) * limit;
            last = page * limit;
            map.put("first", first);
            map.put("last", last);
        }
        return roomsMapper.getBuildingRoomsList(map);
    }
    @Override
    public Integer getBuildingRoomsListCount(Map<String,Object> map){
        return roomsMapper.getBuildingRoomsListCount(map);
    }

    @Override
    public void addRoomInfo(Map<String, Object> map) {
        roomsMapper.insertSelective(map);
    }

    @Override
    public Map<String, Object> checkUnit(Map<String, Object> map) {
        return unitsMapper.checkUnit(map) ;
    }

    @Override
    public Map<String, Object> checkRoom(Map<String, Object> map) {
        return roomsMapper.checkRoom(map) ;
    }

    @Override
    public Integer addUnit(Map<String, Object> map) {
        return unitsMapper.addUnit(map);
    }

    @Override
    public void deleteRoom(Integer id) {
        roomsMapper.deleteByPrimaryKey(id);
    }

    @Override
    public Map<String, Object> getRoomInfo(Integer id) {
        return roomsMapper.getRoomInfo(id);
    }

    @Override
    public void changeRoomInfo(Map<String, Object> map) {
        roomsMapper.changeRoomInfo(map);
    }

    @Override
    @Transactional
    public void batchEditRoom(Integer[] ids, Map<String, Object> map) {
        for(Integer id:ids){
            if(id!=null) {
                map.put("id", id);
                roomsMapper.changeRoomInfo(map);
            }
        }
    }
    @Override
    @Transactional
    public void batchDeleteRoom(Integer[] ids) {
        for(Integer id:ids){
            if(id!=null) {
                roomsMapper.deleteByPrimaryKey(id);
            }
        }
    }

//    @Override
//    @Transactional(rollbackFor = Exception.class)
//    public void batchImportRoomInfo(List<Map<String, Object>> list) {
//        //检查数据
//        for (int i=0;i<list.size();i++){
//            Map<String,Object> map=list.get(i);
//
//            addRoomInfo(map);
//        }
//    }
}
