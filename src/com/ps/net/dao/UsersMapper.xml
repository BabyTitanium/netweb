<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ps.net.dao.UsersMapper">
  <resultMap id="BaseResultMap" type="com.ps.net.model.Users">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_name" jdbcType="VARCHAR" property="user_name" />
    <result column="user_passwd" jdbcType="CHAR" property="user_passwd" />
    <result column="real_name" jdbcType="VARCHAR" property="real_name" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="phone" jdbcType="CHAR" property="phone" />
    <result column="role_id" jdbcType="INTEGER" property="role_id" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_name, user_passwd, real_name, email, phone, role_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from users
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from users
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ps.net.model.Users">
    insert into users (id, user_name, user_passwd, 
      real_name, email, phone, 
      role_id)
    values (#{id,jdbcType=INTEGER}, #{user_name,jdbcType=VARCHAR}, #{user_passwd,jdbcType=CHAR}, 
      #{real_name,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{phone,jdbcType=CHAR}, 
      #{role_id,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.ps.net.model.Users">
    insert into users
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="user_name != null">
        user_name,
      </if>
      <if test="user_passwd != null">
        user_passwd,
      </if>
      <if test="real_name != null">
        real_name,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="role_id != null">
        role_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="user_name != null">
        #{user_name,jdbcType=VARCHAR},
      </if>
      <if test="user_passwd != null">
        #{user_passwd,jdbcType=CHAR},
      </if>
      <if test="real_name != null">
        #{real_name,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=CHAR},
      </if>
      <if test="role_id != null">
        #{role_id,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ps.net.model.Users">
    update users
    <set>
      <if test="user_name != null">
        user_name = #{user_name,jdbcType=VARCHAR},
      </if>
      <if test="user_passwd != null">
        user_passwd = #{user_passwd,jdbcType=CHAR},
      </if>
      <if test="real_name != null">
        real_name = #{real_name,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=CHAR},
      </if>
      <if test="role_id != null">
        role_id = #{role_id,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ps.net.model.Users">
    update users
    set user_name = #{user_name,jdbcType=VARCHAR},
      user_passwd = #{user_passwd,jdbcType=CHAR},
      real_name = #{real_name,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=CHAR},
      role_id = #{role_id,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getUsersByRole" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select * from users where role_id=#{role_id}
  </select>
  <select id="getUserList" parameterType="java.util.Map" resultType="java.util.Map">
    select users.*,roles.role_name as role_name from users left join roles on users.role_id=roles.id
    <if test="first!=null and last!=null" >
    limit #{first},#{last}
  </if>
  </select>
  <select id="getUserStations" parameterType="java.lang.Integer" resultType="java.util.Map">
    select * from  user_station  where user_id=#{user_id}
  </select>
  <select id="userListCount" resultType="java.lang.Integer">
    select count(*) from users
  </select>
    <select id="checkUsername" parameterType="java.lang.String" resultType="java.util.Map">
        select * from users where user_name=#{user_name}
    </select>

  <select id="getArealist" parameterType="java.lang.Integer" resultType="java.util.Map">
    select * from heat_area where available=0
  </select>
  <select id="haveStation" parameterType="java.util.Map" resultType="java.util.Map">
    select * from user_station where user_id=#{user_id} and station_id=#{station_id}
  </select>
  <delete id="deleteByUser" parameterType="java.lang.Integer" >
    delete  from user_station where user_id=#{user_id}
  </delete>
  <insert id="addUserStation" parameterType="java.util.Map">
    insert into user_station (user_id, station_id, station_name) values (#{user_id},#{station_id},#{station_name});
  </insert>
  <select id="findUserByName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select * from users where user_name=#{user_name}
  </select>
</mapper>